// Code generated by mockery v2.46.0. DO NOT EDIT.

package workers

import mock "github.com/stretchr/testify/mock"

// MockTradeEventCallback is an autogenerated mock type for the TradeEventCallback type
type MockTradeEventCallback struct {
	mock.Mock
}

type MockTradeEventCallback_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTradeEventCallback) EXPECT() *MockTradeEventCallback_Expecter {
	return &MockTradeEventCallback_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: event
func (_m *MockTradeEventCallback) Execute(event TradeEvent) {
	_m.Called(event)
}

// MockTradeEventCallback_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockTradeEventCallback_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - event TradeEvent
func (_e *MockTradeEventCallback_Expecter) Execute(event interface{}) *MockTradeEventCallback_Execute_Call {
	return &MockTradeEventCallback_Execute_Call{Call: _e.mock.On("Execute", event)}
}

func (_c *MockTradeEventCallback_Execute_Call) Run(run func(event TradeEvent)) *MockTradeEventCallback_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(TradeEvent))
	})
	return _c
}

func (_c *MockTradeEventCallback_Execute_Call) Return() *MockTradeEventCallback_Execute_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTradeEventCallback_Execute_Call) RunAndReturn(run func(TradeEvent)) *MockTradeEventCallback_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTradeEventCallback creates a new instance of MockTradeEventCallback. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTradeEventCallback(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTradeEventCallback {
	mock := &MockTradeEventCallback{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
