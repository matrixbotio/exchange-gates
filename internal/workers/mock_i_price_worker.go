// Code generated by mockery v2.46.3. DO NOT EDIT.

package workers

import (
	structs "github.com/matrixbotio/exchange-gates-lib/pkg/structs"
	mock "github.com/stretchr/testify/mock"
)

// MockIPriceWorker is an autogenerated mock type for the IPriceWorker type
type MockIPriceWorker struct {
	mock.Mock
}

type MockIPriceWorker_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIPriceWorker) EXPECT() *MockIPriceWorker_Expecter {
	return &MockIPriceWorker_Expecter{mock: &_m.Mock}
}

// GetExchangeTag provides a mock function with given fields:
func (_m *MockIPriceWorker) GetExchangeTag() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetExchangeTag")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockIPriceWorker_GetExchangeTag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExchangeTag'
type MockIPriceWorker_GetExchangeTag_Call struct {
	*mock.Call
}

// GetExchangeTag is a helper method to define mock.On call
func (_e *MockIPriceWorker_Expecter) GetExchangeTag() *MockIPriceWorker_GetExchangeTag_Call {
	return &MockIPriceWorker_GetExchangeTag_Call{Call: _e.mock.On("GetExchangeTag")}
}

func (_c *MockIPriceWorker_GetExchangeTag_Call) Run(run func()) *MockIPriceWorker_GetExchangeTag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIPriceWorker_GetExchangeTag_Call) Return(_a0 string) *MockIPriceWorker_GetExchangeTag_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIPriceWorker_GetExchangeTag_Call) RunAndReturn(run func() string) *MockIPriceWorker_GetExchangeTag_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with given fields:
func (_m *MockIPriceWorker) Stop() {
	_m.Called()
}

// MockIPriceWorker_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockIPriceWorker_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *MockIPriceWorker_Expecter) Stop() *MockIPriceWorker_Stop_Call {
	return &MockIPriceWorker_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *MockIPriceWorker_Stop_Call) Run(run func()) *MockIPriceWorker_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIPriceWorker_Stop_Call) Return() *MockIPriceWorker_Stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockIPriceWorker_Stop_Call) RunAndReturn(run func()) *MockIPriceWorker_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// SubscribeToPriceEvents provides a mock function with given fields: pairSymbols, errorHandler
func (_m *MockIPriceWorker) SubscribeToPriceEvents(pairSymbols []string, errorHandler func(error)) (map[string]structs.WorkerChannels, error) {
	ret := _m.Called(pairSymbols, errorHandler)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeToPriceEvents")
	}

	var r0 map[string]structs.WorkerChannels
	var r1 error
	if rf, ok := ret.Get(0).(func([]string, func(error)) (map[string]structs.WorkerChannels, error)); ok {
		return rf(pairSymbols, errorHandler)
	}
	if rf, ok := ret.Get(0).(func([]string, func(error)) map[string]structs.WorkerChannels); ok {
		r0 = rf(pairSymbols, errorHandler)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]structs.WorkerChannels)
		}
	}

	if rf, ok := ret.Get(1).(func([]string, func(error)) error); ok {
		r1 = rf(pairSymbols, errorHandler)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIPriceWorker_SubscribeToPriceEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribeToPriceEvents'
type MockIPriceWorker_SubscribeToPriceEvents_Call struct {
	*mock.Call
}

// SubscribeToPriceEvents is a helper method to define mock.On call
//   - pairSymbols []string
//   - errorHandler func(error)
func (_e *MockIPriceWorker_Expecter) SubscribeToPriceEvents(pairSymbols interface{}, errorHandler interface{}) *MockIPriceWorker_SubscribeToPriceEvents_Call {
	return &MockIPriceWorker_SubscribeToPriceEvents_Call{Call: _e.mock.On("SubscribeToPriceEvents", pairSymbols, errorHandler)}
}

func (_c *MockIPriceWorker_SubscribeToPriceEvents_Call) Run(run func(pairSymbols []string, errorHandler func(error))) *MockIPriceWorker_SubscribeToPriceEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string), args[1].(func(error)))
	})
	return _c
}

func (_c *MockIPriceWorker_SubscribeToPriceEvents_Call) Return(_a0 map[string]structs.WorkerChannels, _a1 error) *MockIPriceWorker_SubscribeToPriceEvents_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIPriceWorker_SubscribeToPriceEvents_Call) RunAndReturn(run func([]string, func(error)) (map[string]structs.WorkerChannels, error)) *MockIPriceWorker_SubscribeToPriceEvents_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIPriceWorker creates a new instance of MockIPriceWorker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIPriceWorker(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIPriceWorker {
	mock := &MockIPriceWorker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
